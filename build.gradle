// 프로젝트의 플러그인 의존성 관리
buildscript {
    // build.gradle에서 사용하는 전역 변수 설정
    ext {
        springBootVersion = '2.1.9.RELEASE'
    }
    // 라이브러리들을 어떤 원격 저장소에서 받을지 설정
    // jcenter가 mavenCentral보다 라이브러리 업로드가 더 쉽다.
    repositories {
        mavenCentral()
        jcenter()
    }
    // 의존성 선언
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 플러그인 의존성 적용하기
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
// 스프링 부트의 의존성을 관리해주는 플러그인
apply plugin: 'io.spring.dependency-management'

group 'com.jojoldu.book'
version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-mustache')
    // h2: 인메모리형 관계형 db. 재시작할 때 마다 초기화 되기 때문에 테스트 용도로 사용된다.
    compile('com.h2database:h2')

    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    compile('org.springframework.session:spring-session-jdbc')

    compile("org.mariadb.jdbc:mariadb-java-client")

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.springframework.security:spring-security-test")

    // 롬복은 자바 개발할 때 자주 사용하는 Getter, Setter, 기본 생성자, toString 등을 어노테이션으로 자동 생성해준다.
    annotationProcessor('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
}




//plugins { // (1)
//    id 'org.springframework.boot' version '2.4.1' // RELEASE 삭제
//    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
//    id 'java'
//}
//
//group 'com.jojoldu.book'
//version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
//sourceCompatibility = 1.8
//
//repositories {
//    mavenCentral()
//    jcenter()
//}
//
//// for Junit 5
//test { // (2)
//    useJUnitPlatform()
//}
//
//dependencies {
//    //(3)
//    implementation('org.springframework.boot:spring-boot-starter-web')
//    implementation('org.springframework.boot:spring-boot-starter-mustache')
//
//    // lombok
//    implementation('org.projectlombok:lombok')
//    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
//    annotationProcessor('org.projectlombok:lombok')
//    testImplementation('org.projectlombok:lombok')
//    testAnnotationProcessor('org.projectlombok:lombok')
//
//    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
//    implementation("org.mariadb.jdbc:mariadb-java-client")
//    implementation('com.h2database:h2')
//
//    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
//    implementation('org.springframework.session:spring-session-jdbc')
//
//    testImplementation('org.springframework.boot:spring-boot-starter-test')
//    testImplementation("org.springframework.security:spring-security-test")
//}
